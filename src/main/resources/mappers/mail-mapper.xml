<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mailMapper">

	<resultMap id="mailResult" type="Mail">
		<result column="mail_no" property="mailNo" />
		<result column="mail_title" property="mailTitle" />
		<result column="mail_content" property="mailContent" />
		<result column="sender" property="sender" />
		<result column="sender_name" property="senderName" />
		<result column="receiver" property="receiver" />
		<result column="mail_ref" property="mailRef" />
		<result column="send_date" property="sendDate" />
		<result column="send_status" property="sendStatus" />
		<collection resultMap="mailStatusResult" property="mailStatus" />
		<collection resultMap="tagResult" property="tag" />
	</resultMap>
	
	<resultMap id="mailStatusResult" type="MailStatus">
		<result column="mail_no" property="mailNo" />
		<result column="user_mail" property="userMail" />
		<result column="user_name" property="userName" />
		<result column="mail_type" property="mailType" />
		<result column="mail_read" property="mailRead" />
		<result column="mail_delete" property="mailDelete" />
		<result column="mail_spam" property="mailSpam" />
		<result column="mail_important" property="mailImportant" />
		<result column="tag_no" property="tagNo" />
	</resultMap>
	
	<resultMap id="attachmentResult" type="Attachment">
		<result column="file_no" property="fileNo" />
		<result column="origin_name" property="originName" />
		<result column="change_name" property="changeName" />
		<result column="upload_date" property="uploadDate" />
	</resultMap>
	
	<resultMap id="tagResult" type="Tag">
		<result column="tag_no" property="tagNo" />
		<result column="tag_name" property="tagName" />
		<result column="tag_color" property="tagColor" />
	</resultMap>
	
	<resultMap id="spamResult" type="Spam">
		<result column="spam_no" property="spamNo" />
		<result column="user_mail" property="userMail" />
		<result column="spam_address" property="spamAddress" />
	</resultMap>
	
	<resultMap id="splitEmailResult" type="SplitEmail">
		<result column="email" property="email" />
		<result column="name" property="name" />
	</resultMap>
	
	<resultMap id="memberResult" type="Member">
		<result column="user_no" property="userNo"/>
		<result column="dep_name" property="depName"/>
		<result column="job_name" property="jobName"/>
		<result column="user_name" property="userName"/>
		<result column="email" property="email"/>
		<result column="status" property="status"/>
		<result column="prof_img" property="profImg"/>
	</resultMap>
	
	<select id="selectTagList" resultMap="tagResult">
		select
			   tag_no
			 , tag_name
			 , tag_color
		  from mail_tag
		 where user_mail = #{email}
		 order
		    by tag_no
	</select>
	
	<insert id="insertTag">
		insert 
		  into mail_tag 
		     (
		       tag_no
		     , user_mail
		     , tag_name
		     , tag_color)
		values 
		     (
		       seq_tag.nextval
		     , #{userMail}
		     , #{tagName} 
		     , #{tagColor}
		     )
	</insert>
	
	<update id="updateTag">
		update
			   mail_tag
		   set 
		   	   tag_name = #{tagName}
		     , tag_color = #{tagColor}
		 where tag_no = #{tagNo}
	</update>
	
	<delete id="deleteTag">
		delete
	      from mail_tag
	     where tag_no = #{tagNo}
	</delete>
	
	<insert id="insertMail">
		insert
		  into mail
		     (
		       mail_no
		     , mail_title
		     , mail_content
		     , sender
		     , receiver
		     , mail_ref
		     )
		values
			 (
			   seq_mail.nextval
			 , #{mailTitle}
			 , #{mailContent}
			 , #{sender}
			 , #{receiver}
			 , #{mailRef}
			 )
	</insert>
	
	<insert id="insertAttachment">
		insert
		  into attachment
		     (
		       file_no
		     , ref_type
		     , ref_no
		     , origin_name
		     , change_name
		     )
		values
			 (
			   seq_file.nextval
			 , 1
			 , seq_mail.currval
			 , #{originName}
			 , #{changeName}
			 )
	</insert>
	
 	<insert id="insertMailStatus">
		insert
		  into mail_status
		     (
		       mail_no
		     , user_mail
		     , user_name
		     , mail_type
		     )
		values
			 (
			   seq_mail.currval
			 , #{userMail}
			 , #{userName}
			 , #{mailType}
			 )
	</insert>
	
	<select id="selectPreviewSplitEmail" resultMap="splitEmailResult">
		select split_email as "email"        
		     , user_name as "name"     
		  from (            
		        select substr(m.list, instr(m.list, ',', 1, level) + 1, instr(m.list, ',', 1, level + 1) - instr(m.list, ',', 1, level)-1 ) AS split_email              
		          from (select ',' || #{email} || ',' AS list 
		                  from dual) m          
     <![CDATA[ connect by level <= length(m.list) - length(replace(m.list, ',')) - 1 ]]>
		       ) result     
		  left join member mem on result.split_email = mem.email
	</select>
	
	<select id="selectUserName" resultType="String">
		select
			   user_name
		  from member
		 where email = #{email}
	</select>
	
	<insert id="saveMail">
		insert
		  into mail
		     (
		       mail_no
		     , mail_title
		     , mail_content
		     , sender
		     , receiver
		     , mail_ref
		     , send_status
		     )
		values
			 (
			   seq_mail.nextval
			 , #{mailTitle}
			 , #{mailContent}
			 , #{sender}
			 , #{receiver}
			 , #{mailRef}
			 , 'N'
			 )
	</insert>
	
	<select id="selectCurrMailNo" resultType="_int">
		select
			   seq_mail.currval
		  from dual
	</select>
	
	<update id="updateSaveMail">
		update
			   mail
		   set 
		       mail_title = #{mailTitle}
		     , mail_content = #{mailContent}
		     , receiver = #{receiver}
		     , mail_ref = #{mailRef}
		 where mail_no = #{mailNo}
		   and send_status = 'N'
	</update>
	
	<select id="selectAttachment" resultMap="attachmentResult">
		select 
		       file_no
		     , origin_name
		     , change_name
		  from attachment
		 where ref_type = 1
		   and ref_no = #{refNo}
	</select>
	
	<delete id="deleteAttachment">
		delete
		  from attachment
		 where ref_type = 1
		   and ref_no = #{refNo}
	</delete>
	
	<insert id="updateSaveMailAttachment">
		insert
		  into attachment
		     (
		       file_no
		     , ref_type
		     , ref_no
		     , origin_name
		     , change_name
		     )
		values
			 (
			   seq_file.nextval
			 , 1
			 , #{refNo}
			 , #{originName}
			 , #{changeName}
			 )
	</insert>
	
	<update id="sendSaveMail">
		update
			   mail
		   set 
		       mail_title = #{mailTitle}
		     , mail_content = #{mailContent}
		     , receiver = #{receiver}
		     , mail_ref = #{mailRef}
		     , send_status = 'Y'
		 where mail_no = #{mailNo}
		   and send_status = 'N'
	</update>

	<select id="selectListCount" resultType="_int">
		select 
		       count(*)
		  from mail
		  join mail_status using (mail_no)
		 where user_mail = #{email}
		 <choose>
		 	<when test='boxType == "1"'>
 			    and mail_spam = 'N'
			    and mail_delete = 'N'
				and mail_type in (1, 3)
			    and sender not in (
			                       select spam_address
			                         from mail_spam
			                        where user_mail = #{email}
			                     )
		 	</when>
		 	<when test='boxType == "2"'>
			    and mail_delete = 'N'
		 		and mail_type = 2
		 	</when>
		 	<when test='boxType == "3"'>
			    and mail_delete = 'N'
		 		and sender = #{email}
			    and receiver like '%'||#{email}||'%'
		 	</when>
		 	<when test='boxType == "4"'>
		 	    and mail_type in (1, 3)
		 	    and mail_delete = 'N'
	 	        and (
			          mail_spam = 'Y' 
			          or sender in ( 
			                         select spam_address
			                           from mail_spam
			                          where user_mail = #{email}
			                       )
			         )
		 	</when>
		 	<when test='boxType == "5"'>
			    and mail_delete = 'Y'
		 	</when>
		 	<when test='boxType == "6"'>
		 		and mail_important = 'Y'
		 	</when>
		 	<when test='boxType == "7"'>
		 		and mail_read = 'N'
		 	</when>
		 </choose>
	</select>
	
	<select id="selectNotReadCount" resultType="_int">
		select 
		       count(*)
		  from mail
		  join mail_status using (mail_no)
		 where user_mail = #{email}
		   and mail_read = 'N'
		 <choose>
		 	<when test='boxType == "1"'>
			    and mail_spam = 'N'
			    and mail_delete = 'N'
				and mail_type in (1, 3)
			    and sender not in (
			                        select spam_address
			                          from mail_spam
			                         where user_mail = #{email}
			                       )		 	
		 	</when>
		 	<when test='boxType == "2"'>
		 		and mail_type = 2
			    and mail_delete = 'N'
		 	</when>
		 	<when test='boxType == "4"'>
		 	    and mail_type in (1, 3)
		 	    and mail_delete = 'N'
	 	        and (
			          mail_spam = 'Y' 
			          or sender in ( 
			                         select spam_address
			                           from mail_spam
			                          where user_mail = #{email}
			                       )
			         )
		 	</when>
		 	<when test='boxType == "5"'>
			    and mail_delete = 'Y'
		 	</when>
		 	<when test='boxType == "6"'>
		 		and mail_important = 'Y'
		 	</when>
		 	<when test='boxType == "7"'>
		 	</when>
		 </choose>
	</select>
	
	<select id="selectInbox" resultMap="mailResult">
		select 
		       mail_no
		     , mail_title
		     , to_char(send_date, 'yy-mm-dd hh24:mi') as "send_date"
		     , sender
		     , mem.user_name as "sender_name"
		     , mail_read
		     , mail_important
		     , t.tag_no
		     , t.tag_name
		     , t.tag_color
		  from mail m
		  join mail_status s using (mail_no)
		  left join member mem on (sender = email)
		  left join mail_tag t on (s.tag_no = t.tag_no)
		 where s.user_mail = #{email}
		   and mail_type in (1, 3)
		   and mail_delete = 'N'
		   and mail_spam = 'N'
		   and sender not in ( 
		                       select spam_address
		                         from mail_spam
		                        where user_mail = #{email}
		                     )
		 order by mail_no desc
	</select>
	
	<select id="selectMailDetail" resultMap="mailResult">
		select 
		       mail_no
		     , mail_title
		     , mail_content
		     , sender
    		 , m.user_name as "sender_name" 
		     , receiver
		     , mail_ref
     		 , to_char(send_date, 'yyyy-mm-dd day hh24:mi:ss') as "send_date"
		     , mail_important
		     , tag_no
		     , tag_name
		     , tag_color
		  from mail
		  join mail_status s using (mail_no)
		  left join member m on (sender = email)
		  left join mail_tag using (tag_no)
		 where mail_no = #{mailNo}
		   and s.user_mail = #{email}
 		 <choose>
		 	<when test='boxType == "1"'>
				and mail_type in (1, 3)	 	
		 	</when>
		 	<when test='boxType == "2"'>
		 		and mail_type = 2
		 	</when>
		 	<when test='boxType == "4"'>
		 		and mail_type in (1, 3)
		 	</when>
		 </choose>
	</select>
	
	<select id="selectSplitEmail" resultMap="splitEmailResult">
		select split_email as "email"        
		     , user_name as "name"     
		  from (            
		        select substr(m.list, instr(m.list, ',', 1, level) + 1, instr(m.list, ',', 1, level + 1) - instr(m.list, ',', 1, level)-1 ) AS split_email              
		          from (
		                select ',' || ${type} || ',' AS list                       
		                  from mail                     
		                 where mail_no = #{mailNo}) m           
     <![CDATA[ connect by level <= length(m.list) - length(replace(m.list, ',')) - 1 ]]>
		       ) result     
		  left join member mem on result.split_email = mem.email
	</select>
	
	<update id="updateMailImportant">
		update
		       mail_status
		   set mail_important = #{type}
		 where mail_no = #{mailNo}
		   and user_mail = #{email}
	</update>
	
	<update id="updateMailRead">
		update
		       mail_status
		   set mail_read = #{type}
		 where mail_no = #{mailNo}
		   and user_mail = #{email}
	</update>
	
	<update id="updateMailStatus">
		update
		       mail_status
		   set ${type} = 'Y'
		 where mail_no in
 	     <foreach collection="noArr" item='no' index='i' open="(" close=")" separator=",">
           #{no}
         </foreach>
		   and user_mail = #{email}
	</update>
	
	<select id="selectSender" resultType="String">
		select sender
		  from (
		            select sender
		                 , (
		                     select count(*)
		                      from mail_spam
		                     where user_mail = #{email}
		                       and spam_address = sender
		                   ) count
		              from mail
		             where mail_no in
					  <foreach collection="noArr" item='no' index='i' open="(" close=")" separator=",">
			           #{no}
			         </foreach>
		       )
		 where count = 0
	</select>
	
	<insert id="insertSpam">
		insert
		  into mail_spam
		     (
		       spam_no
		     , user_mail
		     , spam_address
		     )
		values
		     (
		       seq_spam.nextval
		     , #{email}
		     , #{sender}
		     )
	</insert>
	
	<select id="selectSentbox" resultMap="mailResult">
		select 
		       mail_no
		     , mail_title
		     , to_char(send_date, 'yy-mm-dd hh24:mi') as "send_date"
		     , receiver
		     , mail_read
		     , mail_important
		     , t.tag_no
		     , t.tag_name
		     , t.tag_color
		  from mail m
		  join mail_status s using (mail_no)
		  left join member mem on (sender = email)
		  left join mail_tag t on (s.tag_no = t.tag_no)
		 where s.user_mail = #{email}
		   and mail_type = 2
		   and mail_delete = 'N'
		 order by mail_no desc
	</select>
	
	<select id="selectMailByNo" resultMap="mailResult">
		select
			   mail_no
			 , mail_title
			 , mail_content
			 , sender
			 , m.user_name as "sender_name"
			 , receiver
			 , mail_ref
		  from mail
		  left join member m on (sender = email)
		 where mail_no = #{mailNo}
	</select>

	<select id="selectOutbox" resultMap="mailResult">
		select 
		       mail_no
		     , mail_title
		     , to_char(send_date, 'yy-mm-dd hh24:mi') as "send_date"
		     , receiver
		  from mail
		 where sender = #{email}
		   and send_status = 'N'
		 order by mail_no desc
	</select>
	
	<select id="selectOutboxListcount" resultType="_int">
		select 
		       count(*)
		  from mail
		 where sender = #{email}
		   and send_status = 'N'
	</select>
		
	<update id="updateTagChange">
		update
		       mail_status
		   set tag_no = 
		   <choose>
		   	<when test='type == "적용"'>
		   		#{tagNo}
		   	</when>
		   	<when test='type == "해제"'>
		   		''
		   	</when>
		   </choose>
		 where mail_no in
		  <foreach collection="noArr" item='no' index='i' open="(" close=")" separator=",">
           #{no}
         </foreach>
		   and user_mail = #{email}
		   <if test='type == "해제"'>
		   and tag_no = #{tagNo}
		   </if>
	</update>
	
	<delete id="deleteMail">
		delete
		  from mail
		 where mail_no in
		  <foreach collection="noArr" item='no' index='i' open="(" close=")" separator=",">
           #{no}
         </foreach>
		   and sender = #{email}
		   and send_status = 'N'
	</delete>
	
	<select id="selectToMe" resultMap="mailResult">
		 select 
		       mail_no
		     , s.user_mail
		     , mail_type
		     , mail_title
		     , to_char(send_date, 'yy-mm-dd hh24:mi') as "send_date"
		     , mail_read
		     , mail_important
		     , tag_no
		     , tag_name
		     , tag_color
		  from mail
		  join mail_status s using (mail_no)
		  left join mail_tag using (tag_no)
		 where s.user_mail = #{email}
		   and mail_delete = 'N'
		   and sender = #{email}
		   and receiver like '%'||#{email}||'%'
		 order by mail_no desc
	</select>

	<update id="updateToMeTagChange">
		update
		       mail_status
		   set tag_no = 
		   <choose>
		   	<when test='type == "적용"'>
		   		#{tagNo}
		   	</when>
		   	<when test='type == "해제"'>
		   		''
		   	</when>
		   </choose>
		 where mail_no = #{mailNo}
		   and user_mail = #{email}
		   <if test='type == "해제"'>
		   and tag_no = #{tagNo}
		   </if>
		   and mail_type = #{mailType}
	</update>
	
	<select id="selectEtcbox" resultMap="mailResult">
			select 
		       mail_no
		     , mail_title
		     , to_char(send_date, 'yy-mm-dd hh24:mi') as "send_date"
		     , sender
		     , mem.user_name as "sender_name"
		     , mail_read
		     , mail_important
		     , t.tag_no
		     , t.tag_name
		     , t.tag_color
		  from mail m
		  join mail_status s using (mail_no)
		  left join member mem on (sender = email)
		  left join mail_tag t on (s.tag_no = t.tag_no)
		 where s.user_mail = #{email}
		 <choose>
		 	<when test='boxType == "5"'>
		 	and	mail_delete = 'Y'
		 	</when>
		 	<when test='boxType == "6"'>
		 	and	mail_important = 'Y'
		 	</when>
		 	<when test='boxType == "7"'>
		 	and	mail_read = 'N'
		 	</when>
		 </choose>
		 order by mail_no desc
	</select>
	
	<select id="selectSpambox" resultMap="mailResult">
			select 
		       mail_no
		     , mail_title
		     , to_char(send_date, 'yy-mm-dd hh24:mi') as "send_date"
		     , sender
		     , mem.user_name as "sender_name"
		     , mail_read
		     , mail_important
		     , tag_no
		     , tag_name
		     , tag_color
		  from mail
		  join mail_status s using (mail_no)
		  left join member mem on (sender = email)
 		  left join mail_tag using (tag_no)
		 where s.user_mail = #{email}
		   and mail_type in (1, 3)
		   and mail_delete = 'N'
		   and (
		        mail_spam = 'Y'
		        or sender in (
		                       select spam_address
		                       
		                         from mail_spam
		                        where user_mail = #{email}
		                     )
		       )
		 order by mail_no desc
	</select>
	
	<update id="updateSpamCancle">
		update
		       mail_status
		   set mail_spam = 'N'
		 where mail_no in
 	     <foreach collection="noArr" item='no' index='i' open="(" close=")" separator=",">
           #{no}
         </foreach>
		   and user_mail = #{email}
	</update>
	
	<select id="selectSpamAddr" resultMap="spamResult">
		select 
			   spam_address
		  from mail_spam
		 where user_mail = #{email}
	</select>
	
	<delete id="deleteSpam">
		delete
		  from mail_spam
		 where user_mail = #{email}
		   and spam_address = #{deleteMail}
	</delete>
	
	<delete id="realDelete">
		delete
		  from mail_status
		 where user_mail = #{email}
		   and mail_no in
 	     <foreach collection="noArr" item='no' index='i' open="(" close=")" separator=",">
           #{no}
         </foreach>
	</delete>
	
	<update id="restoreMail">
		update
		       mail_status
		   set mail_delete = 'N'
		 where mail_no in
 	     <foreach collection="noArr" item='no' index='i' open="(" close=")" separator=",">
           #{no}
         </foreach>
		   and user_mail = #{email}
	</update>
	
	<delete id="vacateSpambox">
		delete
		  from mail_status
		 where user_mail = #{email}
		  join mail using (mail_no)
		   and mail_spam = 'Y' 
			or sender in ( 
	                       select spam_address
	                         from mail_spam
	                        where user_mail = #{email}
	                      )
	</delete>
		
	<delete id="vacateTrashbox">
		delete
		  from mail_status
		 where user_mail = #{email}
		   and mail_delete = 'Y'
	</delete>
		
	<delete id="deleteAttachmentbyFileNo">
		delete
		  from attachment
		 where ref_type = 1
		   and file_no = #{fileNo}
	</delete>
	
	 <insert id="insertMailStatusSaveMail">
		insert
		  into mail_status
		     (
		       mail_no
		     , user_mail
		     , user_name
		     , mail_type
		     )
		values
			 (
			   #{mailNo}
			 , #{userMail}
			 , #{userName}
			 , #{mailType}
			 )
	</insert>
	
</mapper>